---
import Base from "../Layouts/Base.astro";
import AuthContainer from "../components/AuthContainer.astro";
import ThreeWayToggle from "../components/ThreeWayToggle.astro";

import { getSession } from "auth-astro/server";
import { type Session } from "@auth/core/types";

type ExtendedSession = {
	team: string;
	teamName: string;
	teamImage: string;
	user: {
		role: string;
	};
};

const session = (await getSession(Astro.request)) as Session & ExtendedSession;

if (!session) {
	const error = "authentication_error";
	const errorDescription = "User session not found or expired. Please log in.";
	const queryParams = new URLSearchParams({ error, errorDescription });
	const redirectUrl = `/error?${queryParams.toString()}`;

	return new Response(null, {
		status: 302,
		headers: new Headers({
			Location: redirectUrl,
		}),
	});
} else if (session.user.role === "guest") {
	const error = "authorization_error";
	const errorDescription =
		"User does not have the necessary permissions to access this page. Please log in with an authorized account. If you believe this is an error, please contact your administrator.";
	const queryParams = new URLSearchParams({ error, errorDescription });
	const redirectUrl = `/error?${queryParams.toString()}`;

	return new Response(null, {
		status: 302,
		headers: new Headers({
			Location: redirectUrl,
		}),
	});
}

import { db, Event, User } from "astro:db";
import { like } from "astro:db";

if (Astro.request.method === "POST") {
	try {
		const data = await Astro.request.formData();
		console.log("data", data);
		console.log("selected", data.get("selected"));

		if (data.get("selected") != null) {
			console.log("updating availability");

			const eventID = data.get("eventID") as string;
			const status = data.get("selected") as string;

			const event = (await db
				.select()
				.from(Event)
				.where(like(Event.id, eventID)))?.[0];

			if (event) {
				let statusGoing = event.statusGoing.split(",").filter((id) => id !== "");
				let statusMaybe = event.statusMaybe.split(",").filter((id) => id !== "");
				let statusNotGoing = event.statusNotGoing.split(",").filter((id) => id !== "");

				console.log("statusGoing", statusGoing);
				console.log("statusMaybe", statusMaybe);
				console.log("statusNotGoing", statusNotGoing);

				const currentStatus = statusGoing.includes(session.user.id)
					? "yes"
					: statusMaybe.includes(session.user.id)
					? "maybe"
					: "no";

				console.log("currentStatus", currentStatus);
				console.log("status", status);

				if (currentStatus !== status) {
					if (status === "yes") {
						console.log("status is going");
						statusGoing.push(session.user.id);
						statusMaybe = statusMaybe.filter((id) => id !== session.user.id);
						statusNotGoing = statusNotGoing.filter(
							(id) => id !== session.user.id
						); 
					} else if (status === "maybe") {
						console.log("status is maybe");
						statusMaybe.push(session.user.id);
						statusGoing = statusGoing.filter((id) => id !== session.user.id);
						statusNotGoing = statusNotGoing.filter(
							(id) => id !== session.user.id
						);
					} else if (status === "no" && currentStatus !== "no") {
						console.log("status is not going");
						statusNotGoing.push(session.user.id);
						statusGoing = statusGoing.filter((id) => id !== session.user.id);
						statusMaybe = statusMaybe.filter((id) => id !== session.user.id);
					}
				} else {
					console.log("status is the same");
				}

				console.log("statusGoing", statusGoing);
				console.log("statusMaybe", statusMaybe);
				console.log("statusNotGoing", statusNotGoing);

				await db
					.update(Event)
					.set({
						statusGoing: statusGoing.join(","),
						statusMaybe: statusMaybe.join(","),
						statusNotGoing: statusNotGoing.join(","),
					})
					.where(like(Event.id, eventID));
			}
		} else {
			console.log("creating new event");
			const event = {
				name: data.get("name") as string,
				date: new Date(`${data.get("date")}T${data.get("time")}`),
				location: data.get("location") as string,
				comments: data.get("comments") as string,
				team: session.team,
				statusGoing: "",
				statusMaybe: "",
				statusNotGoing: (
					await db.select().from(User).where(like(User.team, session.team))
				)
					.map(({ userId }) => userId)
					.join(","),
			};

			await db.insert(Event).values(event);
		}
	} catch (error) {
		if (error instanceof Error) {
			console.error(error.message);
		}
	}
}

const events = await db
	.select()
	.from(Event)
	.where(like(Event.team, session.team));
---

<Base title="Dashboard">
	<section>
		<AuthContainer />
	</section>

	<section>
		<p>
			In your organization {session.teamName} there are currently {
				events.length
			} events
		</p>
	</section>
	<section>
		<details id="new-event-container">
			<summary>Create a new event?</summary>
			<form method="post" name="new-event" id="new-event">
				<label for="name">Name</label>
				<input type="text" id="name" name="name" required />
				<div class="date-time">
					<label for="date">Date</label>
					<input type="date" id="date" name="date" required />
					<label for="time">Time</label>
					<input type="time" id="time" name="time" required />
				</div>
				<label for="location">Location</label>
				<input type="text" id="location" name="location" required />
				<label for="comments">Comments</label>
				<textarea id="comments" name="comments" required></textarea>

				<button type="submit">Create Event</button>
			</form>
		</details>
	</section>
	<section class="events">
		<h2>Events</h2>
		<div id="status-indicator">
			<button>Do you want to save your availability?</button>
		</div>
		<table>
			<thead>
				<tr>
					<th>Name</th>
					<th>Date</th>
					<th>Time</th>
					<th>Location</th>
					<th>Description</th>
					<th>Status</th>
				</tr>
			</thead>
			<tbody>
				{
					events.map(({ name, comments, location, date, id, statusGoing, statusMaybe }) => (
						<tr>
							<td>{name}</td>
							<td>{date.toLocaleDateString()}</td>
							<td>
								{date.toLocaleTimeString([], {
									hour: "2-digit",
									minute: "2-digit",
								})}
							</td>
							<td>{location}</td>
							<td>{comments}</td>
							<td>
								<ThreeWayToggle eventID=`${id}` selected=`${statusGoing?.includes(session.user.id) ? "yes" : statusMaybe?.includes(session.user.id) ? "maybe" : "no"}` />
							</td>
						</tr>
					))
				}
			</tbody>
		</table>
	</section>
</Base>

<style>
	.events {
		text-align: center;
	}

	table {
		width: 100%;
		border: 0.1rem solid #ddd;
	}

	th,
	td {
		padding: 1rem;
		border-bottom: 0.1rem solid #ddd;
	}

	.events table th {
		text-align: left;
	}

	.events table td {
		text-align: left;
	}

	/* make the three way toggle column */
	.events table td:last-child {
		text-align: center;
		width: fit-content;
	}

	form {
		display: flex;
		flex-direction: column;
		gap: 1rem;
	}

	.date-time {
		display: flex;
		gap: 1rem;
	}

	#status-indicator {
		display: none;
		padding-bottom: 2.5rem;
	}
</style>

<script>
	// get all the three way toggles by the id threeWayToggle
	const threeWayToggles = document.getElementsByName("threeWayToggle");
	const statusIndicator = document.getElementById("status-indicator");

	console.log("threeWayToggles", threeWayToggles);

	if (statusIndicator) {
		console.log("statusIndicator", statusIndicator);
		threeWayToggles.forEach((toggle) => {
			console.log("toggle", toggle);
			// set a listener for the data-interacted attribute on the toggles first div element
			const firstDiv = toggle.shadowRoot?.querySelector("div");

			if (firstDiv) {
				firstDiv.addEventListener("data-interacted", async (event) => {
					if (toggle.getAttribute("data-interacted") === "true") {
						statusIndicator.style.display = "block";
					} else {
						statusIndicator.style.display = "none";
					}
				});
			}
		});
	}
</script>