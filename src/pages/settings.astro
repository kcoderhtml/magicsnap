---
import Base from "../Layouts/Base.astro";
import AuthContainer from "../components/AuthContainer.astro";

import { getSession } from "auth-astro/server";
import { type Session } from "@auth/core/types";

type ExtendedSession = {
	team: string;
	teamName: string;
	teamImage: string;
	user: {
		role: string;
	};
};

const session = (await getSession(Astro.request)) as Session & ExtendedSession;
if (!session) {
	const error = "authentication_error";
	const errorDescription = "User session not found or expired. Please log in.";
	const queryParams = new URLSearchParams({ error, errorDescription });
	const redirectUrl = `/error?${queryParams.toString()}`;

	return new Response(null, {
		status: 302,
		headers: new Headers({
			Location: redirectUrl,
		}),
	});
} else if (session.user.role === "guest") {
	const error = "authorization_error";
	const errorDescription =
		"User does not have the necessary permissions to access this page. Please log in with an authorized account. If you believe this is an error, please contact your administrator.";
	const queryParams = new URLSearchParams({ error, errorDescription });
	const redirectUrl = `/error?${queryParams.toString()}`;

	return new Response(null, {
		status: 302,
		headers: new Headers({
			Location: redirectUrl,
		}),
	});
}

import { LogSnag } from "logsnag";

const logsnag = new LogSnag({
	token: process.env.LOGSNAG_TOKEN || "",
	project: "magicsnap",
});

let error = "";

import { db, like, Organization, Event, User } from "astro:db";

if (Astro.request.method === "POST") {
	const data = await Astro.request.formData();
	console.log(data);
	if (data.has("updateName")) {
		if (session.user.role === "admin") {
			const name = data.get("name") as string;
			await db
				.update(Organization)
				.set({ name })
				.where(like(Organization.team, session.team));

			await logsnag.track({
				channel: "actions",
				event: "team_name_updated",
				icon: "üè∑Ô∏è",
				user_id: session.user.id,
			});
		} else {
			error =
				"You do not have the necessary permissions to update the team name.";
		}
	} else if (data.has("delete")) {
		if (session.user.role === "admin") {
			await db
				.delete(Organization)
				.where(like(Organization.team, session.team));
			await db.delete(Event).where(like(Event.team, session.team));
			await db.delete(User).where(like(User.team, session.team));

			await logsnag.track({
				channel: "actions",
				event: "team_deleted",
				icon: "üóëÔ∏è",
				user_id: session.user.id,
				notify: true,
			});

			return new Response(null, {
				status: 302,
				headers: new Headers({
					Location: "/signout",
				}),
			});
		} else {
			error = "You do not have the necessary permissions to delete the team.";
		}
	} else if (data.has("updateEmail")) {
		const email = data.get("email") as string;
		await db
			.update(User)
			.set({ email })
			.where(like(User.userId, session.user.id));

		await logsnag.track({
			channel: "actions",
			event: "email_updated",
			icon: "üìß",
			user_id: session.user.id,
		});
	} else if (data.has("updateAllergies")) {
		const allergies = data.get("allergies") as string;
		await db
			.update(User)
			.set({ allergies })
			.where(like(User.userId, session.user.id));

		await logsnag.track({
			channel: "actions",
			event: "allergies_updated",
			icon: "ü•ú",
			user_id: session.user.id,
		});
	}
}

const team = (
	await db
		.select()
		.from(Organization)
		.where(like(Organization.team, session.team))
)[0];

const user = (
	await db.select().from(User).where(like(User.userId, session.user.id))
)[0];
---

<Base title="Settings">
	<section>
		<AuthContainer />
	</section>

	<section>
		{
			error && (
				<section>
					<h3 class="warning">Error: {error}</h3>
				</section>
			)
		}

		<div class="settings-container">
			<h1>Personal Settings</h1>
			<form method="post">
				<input
					type="text"
					name="name"
					value={user.name}
					data-value={user.name}
				/>

				<button type="submit" name="updateName" disabled>Update Name</button>

				<label for="update"
					>This will update your name. This <b>will not</b> update your workspace
					name.</label
				>
			</form>

			<form method="post">
				<input
					type="email"
					name="email"
					value={user.email}
					data-value={user.email}
				/>

				<button type="submit" name="updateEmail" disabled>Update Email</button>

				<label for="update"
					>This will update your email. This <b>will not</b> update your workspace
					email.</label
				>
			</form>

			<form method="post">
				<input
					type="text"
					name="allergies"
					value={user.allergies}
					data-value={user.allergies}
				/>

				<button type="submit" name="updateAllergies" disabled
					>Update Allergies</button
				>

				<label for="update"
					>This will update your allergies so your team leaders can keep you
					safe</label
				>
			</form>

			<h1>Team Settings</h1>
			<form method="post">
				<button type="submit" name="delete">Delete Team</button>
				<label for="delete"
					>This will delete your team, events, settings, and team members. This <b
						>will not</b
					> however do anything to your workspace.</label
				>
			</form>

			<form method="post">
				<input
					type="text"
					name="name"
					value={team.name}
					data-value={team.name}
				/>

				<button type="submit" name="updateName" disabled
					>Update Team Name</button
				>

				<label for="update"
					>This will update your team name. This <b>will not</b> update your workspace
					name.</label
				>
			</form>
		</div>
	</section>
</Base>

<style>
	form {
		background: transparent;
		display: flex;
		flex-direction: column;
	}

	.settings-container {
		display: flex;
		flex-direction: column;
		align-items: center;
	}

	.warning {
		color: red;
		text-align: center;
		margin: 0;
		padding: 0;
	}
</style>

<script>
	document.querySelectorAll("[data-value]").forEach((e) => {
		console.log(e);
		e.addEventListener("input", () => {
			const form = e.closest("form");
			const button = form?.querySelector("button");

			console.log(e, form, button);

			console.log(
				(e as HTMLInputElement).value,
				(e as HTMLInputElement).dataset.value
			);

			if (button) {
				if (
					(e as HTMLInputElement).value !==
					(e as HTMLInputElement).dataset.value
				) {
					button.disabled = false;
				} else {
					button.disabled = true;
				}
			}
		});
	});
</script>
