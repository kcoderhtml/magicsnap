---
import Base from "../Layouts/Base.astro";
import ThreeWayToggle from "../components/ThreeWayToggle.astro";
import AuthContainer from "../components/AuthContainer.astro";

import { getSession } from "auth-astro/server";
import { type Session } from "@auth/core/types";

type ExtendedSession = {
	team: string;
	teamName: string;
	teamImage: string;
	user: {
		role: string;
	};
};

const session = (await getSession(Astro.request)) as Session & ExtendedSession;

if (!session) {
	const error = "authentication_error";
	const errorDescription = "User session not found or expired. Please log in.";
	const queryParams = new URLSearchParams({ error, errorDescription });
	const redirectUrl = `/error?${queryParams.toString()}`;

	return new Response(null, {
		status: 302,
		headers: new Headers({
			Location: redirectUrl,
		}),
	});
} else if (session.user.role === "guest") {
	const error = "authorization_error";
	const errorDescription =
		"User does not have the necessary permissions to access this page. Please log in with an authorized account. If you believe this is an error, please contact your administrator.";
	const queryParams = new URLSearchParams({ error, errorDescription });
	const redirectUrl = `/error?${queryParams.toString()}`;

	return new Response(null, {
		status: 302,
		headers: new Headers({
			Location: redirectUrl,
		}),
	});
}

import { db, User } from "astro:db";
import { like } from "astro:db";

let error = null;
if (Astro.request.method === "POST") {
	const data = await Astro.request.formData();
	if (data.has("perms") && session.user.role === "admin") {
		const userId = data.get("eventID") as string;
		const role = data.get("selected") as string;
		if ((role === "admin" || role === "user" || role === "guest") && userId !== session.user.id) {
			await db.update(User).set({ role }).where(like(User.userId, userId));
		} else {
			error = "You cannot change your own role.";
		}
	} else {
		error = "You do not have the necessary permissions to update user roles.";
	}
}

let users = await db.select().from(User).where(like(User.team, session.team));
---

<Base title="Dashboard">
	<section>
		<AuthContainer />
	</section>

	<section>
		<p>
			In your organization {session.teamName} there are currently {users.length}
			users.
		</p>
	</section>
	{
		error && (
			<section><h3 class="warning">Error: {error}</h3></section>
		)
	}
	<section class="users">
		<table>
			<thead>
				<tr>
					<th>Name</th>
					<th>Email</th>
					<th>Image</th>
					<th>Role</th>
					{
						session.user.role === "admin" && (
							<th>Actions</th>
						)
					}
				</tr>
			</thead>
			<tbody>
				{
					users.map(({ userId, name, email, image, role }) => (
						<tr>
							<td>{name}</td>
							<td>{email || "N/A"}</td>
							<td>
								<img src=`${image}` alt="" class="profile-pic"/>
							</td>
							<td>{role}</td>
							{
								session.user.role === "admin" && (
									<td>
										<div class="actions">
											<div class="non-mobile">
												<form method="post" style="background: transparent; display: flex">
													<select name="selected" id="perms" data-selected={role}>
														<option value="admin">Admin</option>
														<option value="user">User</option>
														<option value="guest">Guest</option>
													</select>
													<input type="hidden" name="perms" value="true">
													<button type="submit" name="eventID" value={userId} disabled>Update Perms</button>
												</form>
											</div>
											
											<div class="mobile">
												<h3>Update User Perms</h3>
												<form method="post" style="background: transparent; display: flex" >
													<ThreeWayToggle eventID={userId} selected={role} items={["admin", "user", "guest"]} name="Perms" />
												</form>
											</div>
										</div>
									</td>
								)
							}
						</tr>
					))
				}
			</tbody>
		</table>
	</section>
</Base>

<style>
	table {
		width: 100%;
		border: 0.1rem solid #ddd;
	}

	th,
	td {
		padding: 1rem;
		border-bottom: 0.1rem solid #ddd;
		max-width: 20rem;
		word-wrap: break-word;
	}

    .profile-pic {
        width: 6rem;
        border-radius: 50%;
    }

	table {
		border: 0.1rem solid #ddd;
		table-layout: auto;
	}

	.mobile {
		display: none;
		flex-direction: column;
	}
	.mobile h3 {
		text-align: center;
		margin: 0;
		padding: 0;
	}

	.mobile form {
		margin: 0;
		padding: 0;
	}

	@media only screen and (max-width: 760px),
	(min-device-width: 768px) and (max-device-width: 1024px)  {

		/* Force table to not be like tables anymore */
		table, thead, tbody, th, td, tr { 
			display: block; 
		}

		table {
			transform: none;
		}

		/* Hide table headers (but not display: none;, for accessibility) */
		thead tr { 
			position: absolute;
			top: -9999px;
			left: -9999px;
		}
		
		td { 
			/* Behave  like a "row" */
			border: none;
			border-bottom: 1px solid #eee; 
			position: relative;
			padding-left: 50%; 
		}

		th,
		td {
			max-width: 100%;
		}
		
		td:before { 
			/* Now like a table header */
			position: absolute;
			/* Top/left values mimic padding */
			top: 6px;
			left: 6px;
			width: 100%; 
			padding-right: 10px; 
			white-space: nowrap;
		}
		
		/*
		Label the data
		*/
		td:nth-of-type(1):before { content: "Name"; }
		td:nth-of-type(2):before { content: "Email"; }
		td:nth-of-type(3):before { content: "Image"; }
		td:nth-of-type(4):before { content: "Role"; }
		td:nth-of-type(5) .non-mobile { display: none; }
		td:nth-of-type(5) .mobile { display: flex; }
		td:nth-of-type(5) { border-bottom: 0.25rem solid #ddd; padding-left: 15%; padding-right: 15%; display: flex; justify-content: center; }
	}

	.warning {
		color: red;
		text-align: center;
		margin: 0;
		padding: 0;
	}

	.actions {
		display: flex;
		align-items: center;
	}
	.actions button {
		margin-top: 0;
	}
	.actions select {
		margin-bottom: 0.25rem;
	}
</style>

<script>
	document.querySelectorAll('[data-selected]').forEach(e => {
		(e as HTMLSelectElement).value = (e as HTMLSelectElement).dataset.selected ?? '';

		e.addEventListener('change', () => {
			const form = e.closest('form');
			const button = form?.querySelector('button');

			if (button) {	
				if ((e as HTMLSelectElement).value !== (e as HTMLSelectElement).dataset.selected) {
					button.disabled = false;
				} else {
					button.disabled = true;
				}
			}
		});
	});
</script>